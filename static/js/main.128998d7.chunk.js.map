{"version":3,"sources":["puzzle/Board.jsx","puzzle/helpers.js","puzzle/Puzzle.jsx","storage.js","Game.jsx","index.js"],"names":["Board","cell","_this","this","cellClass","props","grid","x","y","react_default","a","createElement","className","key","onClick","_","handleCellClick","board","_this2","map","row","boardRow","square","renderSquare","Component","range","from","to","Object","toConsumableArray","Array","keys","slice","secondsToTimeString","seconds","date","Date","setSeconds","toISOString","substr","Puzzle","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isAValidGridCell","length","resetGame","setState","getInitialPuzzleState","size","clearInterval","interval","setInterval","tick","emptyNeighbour","state","gameWon","findEmptyCell","getNeighbourCells","slideCell","isGridOrdered","movesCount","onSolved","duration","makeShuffledGrid","values","fill","index","start","end","makeGrid","concat","Math","pow","shuffle","array","shuffledArray","arguments","undefined","randomIndex","floor","random","includes","push","isGridWinnable","reduce","filter","value","sum","currentIndex","allValues","behindValue","gridSize","i","j","inOrder","isOrdered","objectSpread","cells","find","findIndex","cellOne","cellTwo","temp","emptyCell","swapCellValues","puzzle_Board","width","height","xmlns","viewBox","d","Storage","defaultVal","JSON","parse","localStorage","getItem","setItem","stringify","Game","storage","bestPlay","getBestGamePlay","get","gameState","saveGamePlay","gamePlays","set","sort","playA","playB","moveCounts","sortGamePLays","bestCard","puzzle_Puzzle","handleSolved","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.128998d7.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\n\r\nclass Board extends Component {\r\n\r\n    renderSquare(cell){\r\n        let cellClass = 'square';\r\n        if (!this.props.grid[cell.x][cell.y]) {\r\n            cellClass+=' empty';\r\n        }\r\n        return <div className={cellClass} key={cell.x + cell.y} onClick={_ => this.props.handleCellClick(cell)}>\r\n            {this.props.grid[cell.x][cell.y]}\r\n        </div>\r\n    }\r\n    render(){\r\n        let board;\r\n        board = this.props.grid.map((row,x) => {\r\n            let boardRow = row.map((square,y) => {\r\n                return this.renderSquare({x,y})\r\n            })\r\n            return (\r\n                <div className=\"board-row\" key={x}>\r\n                    {boardRow}\r\n                </div>   \r\n            )\r\n        })\r\n        return (\r\n            <div className=\"board\">\r\n                {board}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board","\r\nexport const range = (from,to) => [...Array(to + 1).keys()].slice(from)\r\n\r\nexport const isOrdered = (array) => {\r\n    let i = 0,j=1,inOrder = true\r\n    do {\r\n       inOrder = array[i] < array[j]\r\n       if(!inOrder) return false \r\n       i++;\r\n       j++;\r\n    } while (j < array.length);\r\n    return inOrder;\r\n}\r\n\r\nexport const shuffle = (array,shuffledArray=[]) => {\r\n    let randomIndex = Math.floor(Math.random() * array.length)\r\n    if (shuffledArray.length === array.length) {\r\n      return shuffledArray;  \r\n    }\r\n    if (!shuffledArray.includes(array[randomIndex])) {\r\n        shuffledArray.push(array[randomIndex])\r\n    }\r\n    return shuffle(array,shuffledArray)\r\n}\r\n\r\nexport function secondsToTimeString(seconds){\r\n    var date = new Date(null);\r\n    date.setSeconds(seconds);\r\n    return date.toISOString().substr(14, 5);\r\n}","import React,{Component} from 'react'\r\nimport './puzzle.css'\r\nimport Board from './Board';\r\n\r\nimport {range,isOrdered,shuffle,secondsToTimeString} from \"./helpers\";\r\n\r\nclass Puzzle extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = this.getInitialPuzzleState(props.size)\r\n    }\r\n\r\n    getInitialPuzzleState(size){\r\n        return {\r\n            grid:this.makeShuffledGrid(size),\r\n            duration:0,\r\n            movesCount:0,\r\n            gameWon:false,\r\n        }\r\n    }\r\n\r\n    makeGrid(size,values) {\r\n        return Array(size).fill(null).map((_,index) => {\r\n            let start = index * size\r\n            let end = start + size\r\n            return values.slice(start,end);\r\n        })\r\n    }\r\n\r\n    makeInitialGrid(size){\r\n        return this.makeGrid(size,[...range(1,Math.pow(size,2) - 1),null])\r\n    }\r\n\r\n    makeShuffledGrid(size){\r\n        let grid = this.makeGrid(size,[...shuffle(range(1,Math.pow(size,2) - 1)),null])\r\n        if (!this.isGridWinnable(grid)) {\r\n            return this.makeShuffledGrid(size)\r\n        }\r\n        return grid\r\n    }\r\n    /**\r\n     * Only half of all arrangements(16!/2) is solvable , and that is above 10 billion\r\n     * \r\n     * Grid arrangements solvability checking equation\r\n     * http://mathworld.wolfram.com/15Puzzle.html\r\n     */\r\n    isGridWinnable(grid){\r\n        let values = grid.reduce((values,row) => [...values,...row])\r\n                        .filter(value => value !== null)\r\n        let inversionSum = values.reduce((sum,value,currentIndex,allValues) => {\r\n            let behindValues = allValues.slice(currentIndex)\r\n            let inversion = behindValues.filter(behindValue => behindValue < value)\r\n            return sum + inversion.length\r\n        },0)\r\n        return inversionSum % 2 === 0\r\n    }\r\n\r\n    isGridOrdered(grid){\r\n        let gridSize = grid.length;\r\n        let values = grid.reduce((values,row) => [...values,...row])\r\n                        .filter(value => value !== null)\r\n        return isOrdered(values) && grid[gridSize - 1][gridSize - 1] === null\r\n    }\r\n\r\n    getNeighbourCells(cell,grid){\r\n        cell = {...cell}\r\n        grid = [...grid]\r\n        let neighbours = [\r\n            {x:cell.x - 1, y:cell.y},\r\n            {x:cell.x + 1, y:cell.y},\r\n            {x:cell.x, y:cell.y - 1},\r\n            {x:cell.x, y:cell.y + 1},\r\n        ]\r\n        return neighbours.filter(this.isAValidGridCell(grid));\r\n    }\r\n\r\n    isAValidGridCell = grid => cell => cell.x >= 0 && cell.y >= 0 && cell.x < grid.length && cell.y < grid.length\r\n\r\n    findEmptyCell(cells,grid){\r\n        return cells.find(cell => grid[cell.x][cell.y] === null)\r\n    }\r\n\r\n    findEmptyCellOnGrid(grid){\r\n        let x,y;\r\n        y = grid.findIndex(row => row.includes(null))\r\n        x = grid[y].findIndex(square => square === null)\r\n        return {x,y}\r\n    }\r\n\r\n    swapCellValues(cellOne,cellTwo,grid){\r\n        grid = [...grid]\r\n        let temp = grid[cellOne.x][cellOne.y];\r\n        grid[cellOne.x][cellOne.y] = grid[cellTwo.x][cellTwo.y]\r\n        grid[cellTwo.x][cellTwo.y] = temp\r\n        return grid;\r\n    }\r\n    \r\n    slideCell(cell,emptyCell,grid){\r\n        return this.swapCellValues(cell,emptyCell,grid)\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.setState(this.getInitialPuzzleState(this.props.size))\r\n        clearInterval(this.interval);\r\n        this.interval = null;\r\n    }\r\n\r\n    handleCellClick = (cell) => {\r\n        if (!this.interval) {\r\n            this.interval = setInterval(() => this.tick(), 1000);\r\n        }\r\n        let grid = this.state.grid\r\n        let emptyNeighbour,gameWon = this.state.gameWon;\r\n\r\n        if (gameWon) {\r\n            return\r\n        }\r\n        emptyNeighbour = this.findEmptyCell(this.getNeighbourCells(cell,grid),grid);\r\n        if (emptyNeighbour) {\r\n            grid = this.slideCell(cell,emptyNeighbour,grid);\r\n            if (this.isGridOrdered(grid)) {\r\n                gameWon = true;\r\n                clearInterval(this.interval);\r\n            }\r\n            this.setState({\r\n                grid,\r\n                movesCount:this.state.movesCount + 1,\r\n                gameWon,\r\n            },_ => {\r\n                if (this.state.gameWon) {\r\n                    this.props.onSolved({\r\n                        duration:this.state.duration,\r\n                        movesCount:this.state.movesCount\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    tick(){\r\n        this.setState(state => ({\r\n            duration: state.duration + 1\r\n        }));\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Board grid={this.state.grid} handleCellClick={this.handleCellClick}></Board>\r\n                <br />\r\n                <br />\r\n                <div className=\"stats-board\">\r\n                    <div className=\"stat\">\r\n                        <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                            <path d=\"M17 16a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4.01V4a1 1 0 0 1 1-1 1 1 0 0 1 1 1v6h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v8h1V1a1 1 0 1 1 2 0v9h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v13h1V9a1 1 0 0 1 1-1h1v8z\" /></svg>\r\n                        <span className=\"stat-label\">{this.state.movesCount}</span>\r\n                    </div>\r\n                    <div className=\"stat\">\r\n                        <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                            <path d=\"M16.32 7.1A8 8 0 1 1 9 4.06V2h2v2.06c1.46.18 2.8.76 3.9 1.62l1.46-1.46 1.42 1.42-1.46 1.45zM10 18a6 6 0 1 0 0-12 6 6 0 0 0 0 12zM7 0h6v2H7V0zm5.12 8.46l1.42 1.42L10 13.4 8.59 12l3.53-3.54z\" /></svg>\r\n                        <span className=\"stat-label\">{secondsToTimeString(this.state.duration)}</span>\r\n                    </div>\r\n                </div>\r\n                { this.state.gameWon? <h4>Game Won</h4>:null }\r\n                <br/>\r\n                <button className=\"btn\" onClick={this.resetGame}>New Game</button>\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Puzzle","export default class Storage {\r\n\r\n    get(key,defaultVal){\r\n        return JSON.parse(localStorage.getItem(key)) || defaultVal\r\n    }\r\n\r\n    set(key,value){\r\n        localStorage.setItem(key,JSON.stringify(value))\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport Puzzle from \"./puzzle/Puzzle\";\r\nimport Storage from \"./storage\";\r\nimport './game.css'\r\nimport { secondsToTimeString } from \"./puzzle/helpers\";\r\n\r\nclass Game extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.storage = new Storage();\r\n        let bestPlay = this.getBestGamePlay(this.storage.get('gamePlays',[]))\r\n        this.state = {\r\n            bestPlay\r\n        }\r\n    }\r\n\r\n    handleSolved(gameState){\r\n        let bestPlay = this.getBestGamePlay(this.saveGamePlay(gameState));\r\n        if (bestPlay) {\r\n            this.setState({\r\n                bestPlay\r\n            })\r\n        }\r\n    }\r\n\r\n    saveGamePlay(gameState){\r\n        let gamePlays = this.storage.get('gamePlays',[])\r\n        gamePlays.push(gameState)\r\n        this.storage.set('gamePlays',gamePlays);\r\n        return gamePlays;\r\n    }\r\n\r\n    sortGamePLays(gamePlays){\r\n        return gamePlays.slice().sort((playA,playB) => {\r\n            return playA.duration - playB.duration || playA.moveCounts - playB.moveCounts\r\n        })\r\n    }\r\n\r\n    getBestGamePlay(gamePlays){\r\n        let sortedGamePlays = this.sortGamePLays(gamePlays);\r\n        return sortedGamePlays[0] || null;\r\n    }\r\n\r\n    render(){\r\n        let bestCard = null\r\n        if (this.state.bestPlay) {\r\n            bestCard = (\r\n                <div className=\"best\">\r\n                    <div className=\"best-title\">\r\n                        BEST\r\n                    </div>\r\n                    <div className=\"flex-content-space-between\">\r\n                        <div className=\"flex-align-center\">\r\n                            <svg width=\"15\" height=\"15\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                                <path d=\"M17 16a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4.01V4a1 1 0 0 1 1-1 1 1 0 0 1 1 1v6h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v8h1V1a1 1 0 1 1 2 0v9h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v13h1V9a1 1 0 0 1 1-1h1v8z\" /></svg>\r\n                            <span className=\"best-stat-label\">{this.state.bestPlay.movesCount}</span>\r\n                        </div>\r\n                        <div className=\"flex-align-center\">\r\n                            <svg width=\"15\" height=\"15\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                                <path d=\"M16.32 7.1A8 8 0 1 1 9 4.06V2h2v2.06c1.46.18 2.8.76 3.9 1.62l1.46-1.46 1.42 1.42-1.46 1.45zM10 18a6 6 0 1 0 0-12 6 6 0 0 0 0 12zM7 0h6v2H7V0zm5.12 8.46l1.42 1.42L10 13.4 8.59 12l3.53-3.54z\" /></svg>\r\n                            <span className=\"best-stat-label\">{secondsToTimeString(this.state.bestPlay.duration)}</span>    \r\n                        </div> \r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n        <div className=\"container\">\r\n            <br/>\r\n            <div className=\"flex-content-space-between\">\r\n                <div><h2 className=\"heading m-none\">15 Puzzle</h2></div>\r\n                {bestCard}\r\n            </div>\r\n            <br/>\r\n            <Puzzle size={4} onSolved={gameState => this.handleSolved(gameState)}></Puzzle>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React  from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Game from './Game'\r\n\r\nReactDOM.render(<Game />,document.getElementById('root'))"],"sourceRoot":""}