{"version":3,"sources":["puzzle/Board.jsx","puzzle/helpers.js","puzzle/Puzzle.jsx","App.jsx","index.js"],"names":["Board","cell","_this","this","react_default","a","createElement","className","key","x","y","onClick","_","props","handleCellClick","grid","board","_this2","map","row","boardRow","square","renderSquare","Component","range","from","to","Object","toConsumableArray","Array","keys","slice","Puzzle","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isAValidGridCell","length","resetGame","setState","makeShuffledGrid","size","duration","movesCount","gameWon","clearInterval","interval","setInterval","tick","emptyNeighbour","state","findEmptyCell","getNeighbourCells","slideCell","isGridOrdered","values","fill","index","start","end","makeGrid","concat","Math","pow","shuffle","array","shuffledArray","arguments","undefined","randomIndex","floor","random","includes","push","isGridWinnable","reduce","filter","value","sum","currentIndex","allValues","behindValue","gridSize","i","j","inOrder","isOrdered","objectSpread","cells","find","findIndex","cellOne","cellTwo","temp","emptyCell","swapCellValues","seconds","date","Date","setSeconds","toISOString","substr","puzzle_Board","secondsToTimeString","App","puzzle_Puzzle","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0011a32b.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\n\r\nclass Board extends Component {\r\n\r\n    renderSquare(cell){\r\n        return <button className=\"square\" key={cell.x + cell.y} onClick={_ => this.props.handleCellClick(cell)}>\r\n            {this.props.grid[cell.x][cell.y]}\r\n        </button>\r\n    }\r\n    render(){\r\n        let board;\r\n        board = this.props.grid.map((row,x) => {\r\n            let boardRow = row.map((square,y) => {\r\n                return this.renderSquare({x,y})\r\n            })\r\n            return (\r\n                <div className=\"board-row\" key={x}>\r\n                    {boardRow}\r\n                </div>   \r\n            )\r\n        })\r\n        return (\r\n            <div className=\"board\">\r\n            <div>\r\n                {board}\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board","\r\nexport const range = (from,to) => [...Array(to + 1).keys()].slice(from)\r\n\r\nexport const isOrdered = (array) => {\r\n    let i = 0,j=1,inOrder = true\r\n    do {\r\n       inOrder = array[i] < array[j]\r\n       if(!inOrder) return false \r\n       i++;\r\n       j++;\r\n    } while (j < array.length);\r\n    return inOrder;\r\n}\r\n\r\nexport const shuffle = (array,shuffledArray=[]) => {\r\n    let randomIndex = Math.floor(Math.random() * array.length)\r\n    if (shuffledArray.length === array.length) {\r\n      return shuffledArray;  \r\n    }\r\n    if (!shuffledArray.includes(array[randomIndex])) {\r\n        shuffledArray.push(array[randomIndex])\r\n    }\r\n    return shuffle(array,shuffledArray)\r\n}","import React,{Component} from 'react'\r\nimport './puzzle.css'\r\nimport Board from './Board';\r\n\r\nimport {range,isOrdered,shuffle} from \"./helpers\";\r\n\r\nclass Puzzle extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            grid:this.makeShuffledGrid(props.size),\r\n            duration:0,\r\n            movesCount:0,\r\n            gameWon:false\r\n        }\r\n    }\r\n\r\n    makeGrid(size,values) {\r\n        return Array(size).fill(null).map((_,index) => {\r\n            let start = index * size\r\n            let end = start + size\r\n            return values.slice(start,end);\r\n        })\r\n    }\r\n\r\n    makeInitialGrid(size){\r\n        return this.makeGrid(size,[...range(1,Math.pow(size,2) - 1),null])\r\n    }\r\n\r\n    makeShuffledGrid(size){\r\n        let grid = this.makeGrid(size,[...shuffle(range(1,Math.pow(size,2) - 1)),null])\r\n        if (!this.isGridWinnable(grid)) {\r\n            return this.makeShuffledGrid(size)\r\n        }\r\n        return grid\r\n    }\r\n    /**\r\n     * Only half of all arrangements(16!/2) is solvable , and that is above 10 billion\r\n     * \r\n     * Grid arrangements solvability checking equation\r\n     * http://mathworld.wolfram.com/15Puzzle.html\r\n     */\r\n    isGridWinnable(grid){\r\n        let values = grid.reduce((values,row) => [...values,...row])\r\n                        .filter(value => value !== null)\r\n        let inversionSum = values.reduce((sum,value,currentIndex,allValues) => {\r\n            let behindValues = allValues.slice(currentIndex)\r\n            let inversion = behindValues.filter(behindValue => behindValue < value)\r\n            return sum + inversion.length\r\n        },0)\r\n        return inversionSum % 2 === 0\r\n    }\r\n\r\n    isGridOrdered(grid){\r\n        let gridSize = grid.length;\r\n        let values = grid.reduce((values,row) => [...values,...row])\r\n                        .filter(value => value !== null)\r\n        return isOrdered(values) && grid[gridSize - 1][gridSize - 1] === null\r\n    }\r\n\r\n    getNeighbourCells(cell,grid){\r\n        cell = {...cell}\r\n        grid = [...grid]\r\n        let neighbours = [\r\n            {x:cell.x - 1, y:cell.y},\r\n            {x:cell.x + 1, y:cell.y},\r\n            {x:cell.x, y:cell.y - 1},\r\n            {x:cell.x, y:cell.y + 1},\r\n        ]\r\n        return neighbours.filter(this.isAValidGridCell(grid));\r\n    }\r\n\r\n    isAValidGridCell = grid => cell => cell.x >= 0 && cell.y >= 0 && cell.x < grid.length && cell.y < grid.length\r\n\r\n    findEmptyCell(cells,grid){\r\n        return cells.find(cell => grid[cell.x][cell.y] === null)\r\n    }\r\n\r\n    findEmptyCellOnGrid(grid){\r\n        let x,y;\r\n        y = grid.findIndex(row => row.includes(null))\r\n        x = grid[y].findIndex(square => square === null)\r\n        return {x,y}\r\n    }\r\n\r\n    swapCellValues(cellOne,cellTwo,grid){\r\n        grid = [...grid]\r\n        let temp = grid[cellOne.x][cellOne.y];\r\n        grid[cellOne.x][cellOne.y] = grid[cellTwo.x][cellTwo.y]\r\n        grid[cellTwo.x][cellTwo.y] = temp\r\n        return grid;\r\n    }\r\n    \r\n    slideCell(cell,emptyCell,grid){\r\n        return this.swapCellValues(cell,emptyCell,grid)\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.setState({\r\n            grid:this.makeShuffledGrid(this.props.size),\r\n            duration:0,\r\n            movesCount:0,\r\n            gameWon:false\r\n        })\r\n        clearInterval(this.interval);\r\n        this.interval = null;\r\n    }\r\n\r\n    handleCellClick = (cell) => {\r\n        if (!this.interval) {\r\n            this.interval = setInterval(() => this.tick(), 1000);\r\n        }\r\n        let grid = this.state.grid\r\n        let emptyNeighbour,gameWon = this.state.gameWon;\r\n\r\n        if (gameWon) {\r\n            return\r\n        }\r\n        emptyNeighbour = this.findEmptyCell(this.getNeighbourCells(cell,grid),grid);\r\n        if (emptyNeighbour) {\r\n            grid = this.slideCell(cell,emptyNeighbour,grid);\r\n            if (this.isGridOrdered(grid)) {\r\n                gameWon = true;\r\n                clearInterval(this.interval);\r\n            }\r\n            this.setState({\r\n                grid,\r\n                movesCount:this.state.movesCount + 1,\r\n                gameWon\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    tick(){\r\n        this.setState(state => ({\r\n            duration: state.duration + 1\r\n        }));\r\n    }\r\n\r\n    secondsToTimeString(seconds){\r\n        var date = new Date(null);\r\n        date.setSeconds(seconds);\r\n        return date.toISOString().substr(14, 5);\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Board grid={this.state.grid} handleCellClick={this.handleCellClick}></Board>\r\n                <p><strong>Moves</strong> {this.state.movesCount} </p>\r\n                <p><strong>Duration</strong> {this.secondsToTimeString(this.state.duration)} </p>\r\n                { this.state.gameWon? <h4>Game Won</h4>:null }\r\n                <br/>\r\n                <button onClick={this.resetGame}>Reset</button>\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Puzzle","import React,{Component} from \"react\";\r\nimport Puzzle from \"./puzzle/Puzzle\";\r\n\r\nclass App extends Component {\r\n\r\n    render(){\r\n        return <Puzzle size={4}></Puzzle>\r\n    }\r\n}\r\n\r\nexport default App;","import React  from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />,document.getElementById('root'))"],"sourceRoot":""}