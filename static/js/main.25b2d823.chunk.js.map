{"version":3,"sources":["puzzle/Board.jsx","puzzle/helpers.js","puzzle/Puzzle.jsx","storage.js","settings/user-settings.js","settings/stats.js","settings/Settings.jsx","Game.jsx","index.js"],"names":["Board","cell","_this","this","cellClass","props","grid","x","y","react_default","a","createElement","className","key","onClick","_","handleCellClick","board","_this2","map","row","boardRow","square","renderSquare","Component","range","from","to","Object","toConsumableArray","Array","keys","slice","secondsToTimeString","seconds","date","Date","setSeconds","toISOString","substr","Puzzle","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isAValidGridCell","length","reset","setState","getInitialPuzzleState","size","onReset","duration","state","movesCount","clearInterval","interval","emptyNeighbour","obj","gameWon","setInterval","tick","onStart","JSON","parse","stringify","findEmptyCellAmong","getNeighbourCells","slideCell","isGridOrdered","onSolved","makeShuffledGrid","values","fill","index","start","end","makeGrid","concat","Math","pow","shuffle","array","shuffledArray","arguments","undefined","randomIndex","floor","random","includes","push","isGridWinnable","reduce","filter","value","sum","currentIndex","allValues","behindValue","gridSize","i","j","inOrder","isOrdered","objectSpread","position","neighbour","cells","find","findIndex","cellOne","cellTwo","temp","emptyCell","swapCellValues","direction","findEmptyCellOnGrid","getNeighbours","moveEmptyCellTo","top","down","left","right","theme","puzzle_Board","width","height","xmlns","viewBox","d","prevProps","prevState","snapshot","slide","timestamp","slideTo","Storage","defaultVal","localStorage","getItem","setItem","UserSettings","storage","userSettings","get","hasOwnProperty","data","set","Stats","wrap","func","timeFormatter","forHumans","gamePlays","totalGamePlays","getTotalGamePlays","totalTimeSpend","getTotalTimeSpend","totalMoves","getTotalMovesCount","totalTimeSpendStr","averageMoves","averageTimeStr","acc","item","levels","returntext","splice","max","trim","Settings","changeTheme","event","target","onUserSettingsChanged","toggleDarkMode","darkMode","stats","currentTab","getAll","sync","showHideClassName","show","onClose","id","role","aria-selected","aria-controls","tabIndex","aria-expanded","aria-hidden","aria-labelledby","name","onChange","type","checked","prevGameSolvedTimestamp","loadStatsData","Game","handleStart","isGamePlaying","handleReset","recordSmashed","handleSolved","gameState","previousBestPlay","bestPlay","currentBestPlay","getBestGamePlay","saveGamePlay","b","aProps","getOwnPropertyNames","bProps","propName","isObjectsEqual","now","showModal","showSettingsPanel","hideModal","handleUserSettingsChange","puzzleSlide","sort","playA","playB","moveCounts","sortGamePLays","window","addEventListener","handleKeydown","bind","removeEventListener","e","39","37","38","40","87","65","83","68","keyCode","bestCard","bestCardStyle","onDoubleClick","puzzle_Puzzle","settings_Settings","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.25b2d823.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\n\r\nclass Board extends Component {\r\n\r\n    renderSquare(cell){\r\n        let cellClass = 'square';\r\n        if (!this.props.grid[cell.x][cell.y]) {\r\n            cellClass+=' empty';\r\n        }\r\n        return <div className={cellClass} key={cell.x + cell.y} onClick={_ => this.props.handleCellClick(cell)}>\r\n            {this.props.grid[cell.x][cell.y]}\r\n        </div>\r\n    }\r\n    render(){\r\n        let board;\r\n        board = this.props.grid.map((row,x) => {\r\n            let boardRow = row.map((square,y) => {\r\n                return this.renderSquare({x,y})\r\n            })\r\n            return (\r\n                <div className=\"board-row\" key={x}>\r\n                    {boardRow}\r\n                </div>   \r\n            )\r\n        })\r\n        return (\r\n            <div className=\"board\">\r\n                {board}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board","\r\nexport const range = (from,to) => [...Array(to + 1).keys()].slice(from)\r\n\r\nexport const isOrdered = (array) => {\r\n    let i = 0,j=1,inOrder = true\r\n    do {\r\n       inOrder = array[i] < array[j]\r\n       if(!inOrder) return false \r\n       i++;\r\n       j++;\r\n    } while (j < array.length);\r\n    return inOrder;\r\n}\r\n\r\nexport const shuffle = (array,shuffledArray=[]) => {\r\n    let randomIndex = Math.floor(Math.random() * array.length)\r\n    if (shuffledArray.length === array.length) {\r\n      return shuffledArray;  \r\n    }\r\n    if (!shuffledArray.includes(array[randomIndex])) {\r\n        shuffledArray.push(array[randomIndex])\r\n    }\r\n    return shuffle(array,shuffledArray)\r\n}\r\n\r\nexport function secondsToTimeString(seconds){\r\n    var date = new Date(null);\r\n    date.setSeconds(seconds);\r\n    return date.toISOString().substr(14, 5);\r\n}\r\n\r\nexport function deepCopy(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nexport function isObjectsEqual(a, b) {\r\n    var aProps = Object.getOwnPropertyNames(a);\r\n    var bProps = Object.getOwnPropertyNames(b);\r\n\r\n    if (aProps.length !== bProps.length) {\r\n        return false;\r\n    }\r\n\r\n    for (var i = 0; i < aProps.length; i++) {\r\n        var propName = aProps[i];\r\n        if (a[propName] !== b[propName]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","import React,{Component} from 'react'\r\nimport './puzzle.css'\r\nimport './ribbon.css'\r\nimport './themes.css'\r\nimport Board from './Board';\r\n\r\nimport {range,isOrdered,shuffle,secondsToTimeString,deepCopy} from \"./helpers\";\r\n\r\nclass Puzzle extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = this.getInitialPuzzleState(props.size)\r\n    }\r\n\r\n    getInitialPuzzleState(size){\r\n        return {\r\n            grid:this.makeShuffledGrid(size),\r\n            duration:0,\r\n            movesCount:0,\r\n            gameWon:false,\r\n        }\r\n    }\r\n\r\n    makeGrid(size,values) {\r\n        return Array(size).fill(null).map((_,index) => {\r\n            let start = index * size\r\n            let end = start + size\r\n            return values.slice(start,end);\r\n        })\r\n    }\r\n\r\n    makeInitialGrid(size){\r\n        return this.makeGrid(size,[...range(1,Math.pow(size,2) - 1),null])\r\n    }\r\n\r\n    makeShuffledGrid(size){\r\n        let grid = this.makeGrid(size,[...shuffle(range(1,Math.pow(size,2) - 1)),null])\r\n        if (!this.isGridWinnable(grid)) {\r\n            return this.makeShuffledGrid(size)\r\n        }\r\n        return grid\r\n    }\r\n    /**\r\n     * Only half of all arrangements(16!/2) is solvable , and that is above 10 billion\r\n     * \r\n     * Grid arrangements solvability checking equation\r\n     * http://mathworld.wolfram.com/15Puzzle.html\r\n     */\r\n    isGridWinnable(grid){\r\n        let values = grid.reduce((values,row) => [...values,...row])\r\n                        .filter(value => value !== null)\r\n        let inversionSum = values.reduce((sum,value,currentIndex,allValues) => {\r\n            let behindValues = allValues.slice(currentIndex)\r\n            let inversion = behindValues.filter(behindValue => behindValue < value)\r\n            return sum + inversion.length\r\n        },0)\r\n        return inversionSum % 2 === 0\r\n    }\r\n\r\n    isGridOrdered(grid){\r\n        let gridSize = grid.length;\r\n        let values = grid.reduce((values,row) => [...values,...row])\r\n                        .filter(value => value !== null)\r\n        return isOrdered(values) && grid[gridSize - 1][gridSize - 1] === null\r\n    }\r\n\r\n    getNeighbourCells(cell,grid){\r\n        cell = {...cell}\r\n        grid = [...grid]\r\n        let neighbours = [\r\n            {x:cell.x - 1, y:cell.y},\r\n            {x:cell.x + 1, y:cell.y},\r\n            {x:cell.x, y:cell.y - 1},\r\n            {x:cell.x, y:cell.y + 1},\r\n        ]\r\n        return neighbours.filter(this.isAValidGridCell(grid));\r\n    }\r\n\r\n    getNeighbours(cell,grid){\r\n        cell = {...cell}\r\n        grid = [...grid]\r\n        let neighbours = [\r\n            {\r\n                cell:{x:cell.x, y:cell.y - 1},\r\n                position:'left'\r\n            },\r\n            {\r\n                cell:{x:cell.x, y:cell.y + 1},\r\n                position:'right'\r\n            },\r\n            {\r\n                cell:{x:cell.x - 1, y:cell.y},\r\n                position:'top'\r\n            },\r\n            {\r\n                cell:{x:cell.x + 1, y:cell.y},\r\n                position:'down'\r\n            },\r\n        ]\r\n        return neighbours.filter(neighbour => this.isAValidGridCell(grid)(neighbour.cell));\r\n    }\r\n\r\n    isAValidGridCell = grid => cell => cell.x >= 0 && cell.y >= 0 && cell.x < grid.length && cell.y < grid.length\r\n\r\n    findEmptyCellAmong(cells,grid){\r\n        return cells.find(cell => grid[cell.x][cell.y] === null)\r\n    }\r\n\r\n    findEmptyCellOnGrid(grid){\r\n        let x,y;\r\n        x = grid.findIndex(row => row.includes(null))\r\n        y = grid[x].findIndex(square => square === null)\r\n        return {x,y}\r\n    }\r\n\r\n    swapCellValues(cellOne,cellTwo,grid){\r\n        grid = [...grid]\r\n        let temp = grid[cellOne.x][cellOne.y];\r\n        grid[cellOne.x][cellOne.y] = grid[cellTwo.x][cellTwo.y]\r\n        grid[cellTwo.x][cellTwo.y] = temp\r\n        return grid;\r\n    }\r\n    \r\n    slideCell(cell,emptyCell,grid){\r\n        return this.swapCellValues(cell,emptyCell,grid)\r\n    }\r\n\r\n    moveEmptyCellTo(direction){\r\n        if (!direction) {\r\n            return\r\n        }\r\n        let grid = this.state.grid\r\n        let emptyCell = this.findEmptyCellOnGrid(grid);\r\n        let neighbours = this.getNeighbours(emptyCell,grid);\r\n        let neighbour = neighbours.find(neighbour => neighbour.position === direction);\r\n        if (neighbour) {\r\n            this.handleCellClick(neighbour.cell)\r\n        }\r\n    }\r\n\r\n    slideTo(direction){\r\n        let invertedDirection={\r\n            'top':'down',\r\n            'down':'top',\r\n            'left':'right',\r\n            'right':'left'\r\n        }\r\n        this.moveEmptyCellTo(invertedDirection[direction])\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState(\r\n            this.getInitialPuzzleState(this.props.size)\r\n            ,_ => {\r\n                this.props.onReset({\r\n                    duration:this.state.duration,\r\n                    movesCount:this.state.movesCount\r\n                })\r\n            })\r\n        clearInterval(this.interval);\r\n        this.interval = null;\r\n    }\r\n\r\n    handleCellClick = (cell) => {\r\n\r\n        let grid = this.state.grid\r\n        let emptyNeighbour,gameWon = this.state.gameWon;\r\n\r\n        if (!this.interval) {\r\n            this.interval = setInterval(() => this.tick(), 1000);\r\n            this.props.onStart({\r\n                grid:deepCopy(grid)\r\n            })\r\n        }\r\n\r\n        if (gameWon) {\r\n            return\r\n        }\r\n        emptyNeighbour = this.findEmptyCellAmong(this.getNeighbourCells(cell,grid),grid);\r\n        if (emptyNeighbour) {\r\n            grid = this.slideCell(cell,emptyNeighbour,grid);\r\n            if (this.isGridOrdered(grid)) {\r\n                gameWon = true;\r\n                clearInterval(this.interval);\r\n            }\r\n            this.setState({\r\n                grid,\r\n                movesCount:this.state.movesCount + 1,\r\n                gameWon,\r\n            },_ => {\r\n                if (this.state.gameWon) {\r\n                    this.props.onSolved({\r\n                        duration:this.state.duration,\r\n                        movesCount:this.state.movesCount\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    tick(){\r\n        this.setState(state => ({\r\n            duration: state.duration + 1\r\n        }));\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className={this.props.theme}>\r\n                <Board grid={this.state.grid} handleCellClick={this.handleCellClick}></Board>\r\n                <br />\r\n                <br />\r\n                <div className=\"stats-board\">\r\n                    <div className=\"stat\">\r\n                        <svg width=\"20\" height=\"19\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                            <path d=\"M17 16a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4.01V4a1 1 0 0 1 1-1 1 1 0 0 1 1 1v6h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v8h1V1a1 1 0 1 1 2 0v9h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v13h1V9a1 1 0 0 1 1-1h1v8z\" /></svg>\r\n                        <span className=\"stat-label\">{this.state.movesCount}</span>\r\n                    </div>\r\n                    <div className=\"stat\">\r\n                        <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                            <path d=\"M16.32 7.1A8 8 0 1 1 9 4.06V2h2v2.06c1.46.18 2.8.76 3.9 1.62l1.46-1.46 1.42 1.42-1.46 1.45zM10 18a6 6 0 1 0 0-12 6 6 0 0 0 0 12zM7 0h6v2H7V0zm5.12 8.46l1.42 1.42L10 13.4 8.59 12l3.53-3.54z\" /></svg>\r\n                        <span className=\"stat-label\">{secondsToTimeString(this.state.duration)}</span>\r\n                    </div>\r\n                </div>\r\n                { this.state.gameWon?\r\n                    <div className=\"center pt-30\">\r\n                        <div className=\"roman-ribbon ooz-in\">\r\n                            <span>Puzzle Solved</span>\r\n                        </div>\r\n                    </div>\r\n                    :null }\r\n                <div className=\"center pt-30\">\r\n                    <button className=\"btn\" onClick={this.reset}>Shuffle</button>\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot){\r\n        if(this.props.slide.timestamp !== prevProps.slide.timestamp){\r\n            this.slideTo(this.props.slide.direction)\r\n        }\r\n    }\r\n}\r\n\r\nexport default Puzzle","export default class Storage {\r\n\r\n    get(key,defaultVal){\r\n        return JSON.parse(localStorage.getItem(key)) || defaultVal\r\n    }\r\n\r\n    set(key,value){\r\n        localStorage.setItem(key,JSON.stringify(value))\r\n    }\r\n}","import Storage from \"../storage\";\r\n\r\nexport default class UserSettings {\r\n\r\n    constructor(){\r\n        this.storage = new Storage()\r\n    }\r\n\r\n    get(){\r\n        let userSettings = this.storage.get('userSettings',{});\r\n        if (!userSettings.hasOwnProperty('darkMode')) {\r\n            userSettings['darkMode'] = false\r\n        }\r\n        if (!userSettings.hasOwnProperty('theme')) {\r\n            userSettings['theme'] = 'mud'\r\n        }\r\n        return userSettings;\r\n    }\r\n\r\n    set(data){\r\n        let userSettings = this.get();\r\n        if (data.hasOwnProperty('darkMode')) {\r\n            userSettings['darkMode'] = data['darkMode']\r\n        }\r\n        if (data.hasOwnProperty('theme')) {\r\n            userSettings['theme'] = data['theme']\r\n        }\r\n        this.storage.set('userSettings',userSettings)\r\n        return userSettings;\r\n    }\r\n}","import { secondsToTimeString } from \"../puzzle/helpers\";\r\nimport Storage from \"../storage\";\r\n\r\nexport default class Stats {\r\n\r\n    constructor(){\r\n        this.storage = new Storage()\r\n        this.gamePlays = this.storage.get('gamePlays',[]);\r\n    }\r\n\r\n    sync(){\r\n        this.gamePlays = this.storage.get('gamePlays',[]);\r\n    }\r\n\r\n    getAll(){ \r\n        let totalGamePlays = this.getTotalGamePlays();\r\n        let totalTimeSpend = this.getTotalTimeSpend();\r\n        let totalMoves = this.getTotalMovesCount();\r\n        return {\r\n            totalGamePlays,\r\n            totalMoves,\r\n            totalTimeSpendStr:this.timeFormatter(totalTimeSpend),\r\n            averageMoves:totalGamePlays !== 0 ? Math.floor(totalMoves/totalGamePlays) : 0,\r\n            averageTimeStr:totalGamePlays !== 0 ? secondsToTimeString(Math.floor(totalTimeSpend/totalGamePlays)) : '00:00' \r\n        }\r\n    }\r\n\r\n    getTotalTimeSpend(){\r\n        return this.gamePlays.reduce((acc,item) => acc + item.duration,0);\r\n    }\r\n\r\n    wrap = (func) => (data) => func(data)\r\n\r\n    timeFormatter = this.wrap(this.forHumans)\r\n\r\n    getTotalTimeSpendHumanStr(){\r\n        return this.timeFormatter(this.getTotalTimeSpend());\r\n    }\r\n\r\n    getTotalGamePlays(){\r\n        return this.gamePlays.length;\r\n    }\r\n\r\n    getTotalMovesCount(){\r\n        return this.gamePlays.reduce((acc,item) => acc + item.movesCount,0);\r\n    } \r\n\r\n    forHumans(seconds) {\r\n        var levels = [\r\n            [Math.floor(seconds / 31536000), 'years'],\r\n            [Math.floor((seconds % 31536000) / 86400), 'days'],\r\n            [Math.floor(((seconds % 31536000) % 86400) / 3600), 'hrs'],\r\n            [Math.floor((((seconds % 31536000) % 86400) % 3600) / 60), 'mins'],\r\n            [(((seconds % 31536000) % 86400) % 3600) % 60, 'secs'],\r\n        ];\r\n        var returntext = '';\r\n\r\n        if (levels[1][0] !== 0) {\r\n            levels.splice(-2,2)\r\n        } else if (levels[2][0] !== 0) {\r\n            levels.splice(-1)\r\n        }\r\n    \r\n        for (var i = 0, max = levels.length; i < max; i++) {\r\n            if ( levels[i][0] === 0 ) continue;\r\n            returntext += ' ' + levels[i][0] + ' ' + (levels[i][0] === 1 ? levels[i][1].substr(0, levels[i][1].length-1): levels[i][1]);\r\n        };\r\n        return returntext.trim();\r\n    }\r\n\r\n}","import React,{Component} from \"react\";\r\nimport './settings.css'\r\nimport UserSettings from \"./user-settings\";\r\nimport Stats from \"./stats\";\r\n\r\nclass Settings extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.userSettings = new UserSettings();\r\n        this.stats = new Stats();\r\n        this.state = {\r\n            ...this.userSettings.get(),\r\n            currentTab:0,\r\n            ...this.stats.getAll()\r\n        };\r\n    }\r\n\r\n    changeTheme = (event) => {\r\n        this.setState(\r\n            {theme: event.target.value},\r\n            _ => {\r\n                this.props.onUserSettingsChanged(this.userSettings.set(this.state))\r\n            }\r\n        );\r\n    }\r\n\r\n    toggleDarkMode = event => {\r\n        this.setState(\r\n            {darkMode: !this.state.darkMode},\r\n            _ => {    \r\n                this.props.onUserSettingsChanged(this.userSettings.set(this.state))\r\n            }\r\n        );\r\n    }\r\n\r\n    loadStatsData(){\r\n        this.stats.sync();\r\n        this.setState({\r\n            ...this.stats.getAll()\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        const showHideClassName = this.props.show ? 'modal display-block' : 'modal display-none';\r\n        return (\r\n            <div className={showHideClassName}>\r\n            <section className='modal-main'>\r\n                <div className='header'>\r\n                    <h2 className=\"heading\">Settings</h2>\r\n                    <div className=\"close\" onClick={this.props.onClose}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"black\" width=\"24px\" height=\"24px\">\r\n                            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                            <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tablist\">\r\n                    <button id=\"one-tab\" role=\"tab\" aria-selected={this.state.currentTab === 0} aria-controls=\"one\" tabIndex=\"0\" onClick={_ => this.setState({currentTab:0})} className=\"tab\">General</button>\r\n                    <button id=\"two-tab\" role=\"tab\" aria-selected={this.state.currentTab === 1} aria-controls=\"two\" tabIndex=\"1\" onClick={_ => this.setState({currentTab:1})} className=\"tab\">Stats</button>\r\n                </div>\r\n                <br/>\r\n                <div className=\"tab-panels\">\r\n                    <div role=\"tabpanel\" aria-expanded={this.state.currentTab === 0} aria-hidden=\"false\" aria-labelledby=\"one-tab\" className=\"tab-panel\">                    \r\n                        <div className=\"setting\">\r\n                            <div className=\"setting-title\">Themes</div>\r\n                            <select name=\"theme\" value={this.state.theme} onChange={this.changeTheme} id=\"theme-select\">\r\n                                <option value=\"aqua\">Aqua</option>\r\n                                <option value=\"sky\">Sky</option>\r\n                                <option value=\"chocolate\">Chocolate</option>\r\n                                <option value=\"oreo\">Oreo</option>\r\n                                <option value=\"mud\">Mud</option>\r\n                                <option value=\"iron-man\">Iron Man</option>\r\n                                <option value=\"cadbury\">Cadbury</option>\r\n                                <option value=\"forest\">Forest</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"setting\">\r\n                            <div className=\"setting-title\">Dark Mode</div>\r\n                            <label className=\"switch\">\r\n                                <input type=\"checkbox\" checked={this.state.darkMode} onChange={this.toggleDarkMode} />\r\n                                <span className=\"slider\"></span>\r\n                            </label>\r\n                        </div>                    \r\n                    </div>\r\n                </div>\r\n                <div role=\"tabpanel\" aria-expanded={this.state.currentTab === 1} aria-hidden=\"true\" aria-labelledby=\"two-tab\" className=\"tab-panel\">\r\n                    <div className=\"stat-box\">\r\n                        <div>\r\n                            <div className=\"val\">{this.state.totalGamePlays}</div>\r\n                            <div className=\"name\">Game Plays</div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"val\">{this.state.totalMoves}</div>\r\n                            <div className=\"name\">Moves</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"stat-box\">\r\n                        <div>\r\n                            <div className=\"val\">{this.state.totalTimeSpendStr}</div>\r\n                            <div className=\"name\">Time Spend</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                        <div className=\"text-center\">Average</div>\r\n                        <div className=\"stat-box\">\r\n                        <div>\r\n                            <div className=\"val\">{this.state.averageMoves}</div>\r\n                            <div className=\"name\">Moves</div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"val\">{this.state.averageTimeStr}</div>\r\n                            <div className=\"name\">Time</div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot){\r\n        if(this.props.prevGameSolvedTimestamp !== prevProps.prevGameSolvedTimestamp){\r\n            this.loadStatsData()\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Settings","import React,{Component} from \"react\";\r\nimport Puzzle from \"./puzzle/Puzzle\";\r\nimport Settings  from \"./settings/Settings\";\r\nimport UserSettings  from \"./settings/user-settings\";\r\nimport Storage from \"./storage\";\r\nimport './game.css'\r\nimport './dark-mode.css'\r\nimport { secondsToTimeString,isObjectsEqual } from \"./puzzle/helpers\";\r\n\r\nclass Game extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.storage = new Storage();\r\n        this.userSettings = new UserSettings();\r\n        let bestPlay = this.getBestGamePlay(this.storage.get('gamePlays',[]))\r\n        let userSettings = this.userSettings.get();\r\n        this.state = {\r\n            userSettings,\r\n            showSettingsPanel:false,\r\n            bestPlay,\r\n            isGamePlaying:false,\r\n            recordSmashed:false,\r\n            puzzleSlide:{\r\n                direction:null,\r\n                timestamp:null\r\n            },\r\n            prevGameSolvedTimestamp:null\r\n        }\r\n    }\r\n    handleStart = _ => {\r\n        this.setState({\r\n            isGamePlaying:true\r\n        })\r\n    }\r\n\r\n    handleReset = _ => {\r\n        this.setState({\r\n            isGamePlaying:false,\r\n            recordSmashed:false\r\n        })\r\n    }\r\n\r\n    handleSolved = gameState => {\r\n        let previousBestPlay = this.state.bestPlay;\r\n        let currentBestPlay = this.getBestGamePlay(this.saveGamePlay(gameState));\r\n        if (currentBestPlay) {\r\n            let recordSmashed = previousBestPlay? !isObjectsEqual(previousBestPlay,currentBestPlay):false; \r\n            this.setState({\r\n                bestPlay:currentBestPlay,\r\n                isGamePlaying:false,\r\n                recordSmashed,\r\n                prevGameSolvedTimestamp:Date.now()\r\n            })\r\n        }\r\n    }\r\n\r\n    saveGamePlay(gameState){\r\n        let gamePlays = this.storage.get('gamePlays',[])\r\n        gamePlays.push(gameState)\r\n        this.storage.set('gamePlays',gamePlays);\r\n        return gamePlays;\r\n    }\r\n\r\n    sortGamePLays(gamePlays){\r\n        return gamePlays.slice().sort((playA,playB) => {\r\n            return playA.duration - playB.duration || playA.moveCounts - playB.moveCounts\r\n        })\r\n    }\r\n\r\n    getBestGamePlay(gamePlays){\r\n        let sortedGamePlays = this.sortGamePLays(gamePlays);\r\n        return sortedGamePlays[0] || null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.handleKeydown.bind(this));\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.handleKeydown.bind(this));\r\n    }\r\n\r\n    handleKeydown(e) {\r\n        let moves = {\r\n            39:'right',\r\n            37:'left',\r\n            38:'top',\r\n            40:'down',\r\n            87:'top',//w\r\n            65:'left',//a\r\n            83:'down',//s\r\n            68:'right'//d\r\n        }\r\n        let direction = moves[e.keyCode]\r\n        if (direction) {\r\n            this.setState({\r\n                puzzleSlide:{\r\n                    direction,\r\n                    timestamp:Date.now()\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({ showSettingsPanel: true });\r\n    }\r\n\r\n    hideModal = () => {\r\n        this.setState({ showSettingsPanel: false });\r\n    }\r\n\r\n    handleUserSettingsChange = userSettings => {\r\n        this.setState({\r\n            userSettings\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let bestCard = null\r\n        if (this.state.bestPlay) {\r\n            let bestCardStyle = 'best';\r\n            if (!this.state.isGamePlaying) {\r\n                bestCardStyle += ' highlight';\r\n            }\r\n            if (this.state.recordSmashed) {\r\n                bestCardStyle += ' flash';\r\n            }\r\n            bestCard = (\r\n                <div className={bestCardStyle}>\r\n                    <div className=\"flex-content-space-between\">\r\n                        <div className=\"flex-align-center\">\r\n                            <svg width=\"15\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                                <path d=\"M15 9a3 3 0 0 0 3-3h2a5 5 0 0 1-5.1 5 5 5 0 0 1-3.9 3.9V17l5 2v1H4v-1l5-2v-2.1A5 5 0 0 1 5.1 11H5a5 5 0 0 1-5-5h2a3 3 0 0 0 3 3V4H2v2H0V2h5V0h10v2h5v4h-2V4h-3v5z\"/></svg>\r\n                            <span className=\"best-stat-label\">Best</span>\r\n                        </div>\r\n                        <div className=\"flex-align-center\">\r\n                            <svg width=\"15\" height=\"15\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                                <path d=\"M17 16a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4.01V4a1 1 0 0 1 1-1 1 1 0 0 1 1 1v6h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v8h1V1a1 1 0 1 1 2 0v9h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v13h1V9a1 1 0 0 1 1-1h1v8z\" /></svg>\r\n                            <span className=\"best-stat-label\">{this.state.bestPlay.movesCount}</span>\r\n                        </div>\r\n                        <div className=\"flex-align-center\">\r\n                            <svg width=\"15\" height=\"15\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                                <path d=\"M16.32 7.1A8 8 0 1 1 9 4.06V2h2v2.06c1.46.18 2.8.76 3.9 1.62l1.46-1.46 1.42 1.42-1.46 1.45zM10 18a6 6 0 1 0 0-12 6 6 0 0 0 0 12zM7 0h6v2H7V0zm5.12 8.46l1.42 1.42L10 13.4 8.59 12l3.53-3.54z\" /></svg>\r\n                            <span className=\"best-stat-label\">{secondsToTimeString(this.state.bestPlay.duration)}</span>    \r\n                        </div> \r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div id=\"app\" className={this.state.userSettings.darkMode? 'dark-side':''}>\r\n                <div className=\"container\">\r\n                    <br/>\r\n                    <br/>\r\n                    <div className=\"flex-content-space-between\">\r\n                        <div className=\"title\"><span onDoubleClick={this.showModal}>15</span> Puzzle</div>\r\n                        {bestCard}\r\n                    </div>\r\n                    <br/>\r\n                    <Puzzle size={4}\r\n                        theme={this.state.userSettings.theme} \r\n                        slide={this.state.puzzleSlide}\r\n                        onStart={this.handleStart} \r\n                        onReset={this.handleReset} \r\n                        onSolved={this.handleSolved}></Puzzle>\r\n                </div>\r\n                <Settings\r\n                    prevGameSolvedTimestamp={this.state.prevGameSolvedTimestamp} \r\n                    show={this.state.showSettingsPanel} \r\n                    onClose={this.hideModal} \r\n                    onUserSettingsChanged={this.handleUserSettingsChange}></Settings>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React  from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './index.css'\r\n\r\nimport Game from './Game'\r\n\r\nReactDOM.render(<Game />,document.getElementById('root'))"],"sourceRoot":""}