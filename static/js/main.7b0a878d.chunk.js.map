{"version":3,"sources":["puzzle/Board.jsx","puzzle/helpers.js","puzzle/Puzzle.jsx","App.jsx","index.js"],"names":["Board","cell","_this","this","cellClass","props","grid","x","y","react_default","a","createElement","className","key","onClick","_","handleCellClick","board","_this2","map","row","boardRow","square","renderSquare","Component","range","from","to","Object","toConsumableArray","Array","keys","slice","Puzzle","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isAValidGridCell","length","resetGame","setState","makeShuffledGrid","size","duration","movesCount","gameWon","clearInterval","interval","setInterval","tick","emptyNeighbour","state","findEmptyCell","getNeighbourCells","slideCell","isGridOrdered","values","fill","index","start","end","makeGrid","concat","Math","pow","shuffle","array","shuffledArray","arguments","undefined","randomIndex","floor","random","includes","push","isGridWinnable","reduce","filter","value","sum","currentIndex","allValues","behindValue","gridSize","i","j","inOrder","isOrdered","objectSpread","cells","find","findIndex","cellOne","cellTwo","temp","emptyCell","swapCellValues","seconds","date","Date","setSeconds","toISOString","substr","puzzle_Board","class","width","height","xmlns","viewBox","d","secondsToTimeString","App","puzzle_Puzzle","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7b0a878d.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\n\r\nclass Board extends Component {\r\n\r\n    renderSquare(cell){\r\n        let cellClass = 'square';\r\n        if (!this.props.grid[cell.x][cell.y]) {\r\n            cellClass+=' empty';\r\n        }\r\n        return <div className={cellClass} key={cell.x + cell.y} onClick={_ => this.props.handleCellClick(cell)}>\r\n            {this.props.grid[cell.x][cell.y]}\r\n        </div>\r\n    }\r\n    render(){\r\n        let board;\r\n        board = this.props.grid.map((row,x) => {\r\n            let boardRow = row.map((square,y) => {\r\n                return this.renderSquare({x,y})\r\n            })\r\n            return (\r\n                <div className=\"board-row\" key={x}>\r\n                    {boardRow}\r\n                </div>   \r\n            )\r\n        })\r\n        return (\r\n            <div className=\"board\">\r\n                {board}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board","\r\nexport const range = (from,to) => [...Array(to + 1).keys()].slice(from)\r\n\r\nexport const isOrdered = (array) => {\r\n    let i = 0,j=1,inOrder = true\r\n    do {\r\n       inOrder = array[i] < array[j]\r\n       if(!inOrder) return false \r\n       i++;\r\n       j++;\r\n    } while (j < array.length);\r\n    return inOrder;\r\n}\r\n\r\nexport const shuffle = (array,shuffledArray=[]) => {\r\n    let randomIndex = Math.floor(Math.random() * array.length)\r\n    if (shuffledArray.length === array.length) {\r\n      return shuffledArray;  \r\n    }\r\n    if (!shuffledArray.includes(array[randomIndex])) {\r\n        shuffledArray.push(array[randomIndex])\r\n    }\r\n    return shuffle(array,shuffledArray)\r\n}","import React,{Component} from 'react'\r\nimport './puzzle.css'\r\nimport Board from './Board';\r\n\r\nimport {range,isOrdered,shuffle} from \"./helpers\";\r\n\r\nclass Puzzle extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            grid:this.makeShuffledGrid(props.size),\r\n            duration:0,\r\n            movesCount:0,\r\n            gameWon:false\r\n        }\r\n    }\r\n\r\n    makeGrid(size,values) {\r\n        return Array(size).fill(null).map((_,index) => {\r\n            let start = index * size\r\n            let end = start + size\r\n            return values.slice(start,end);\r\n        })\r\n    }\r\n\r\n    makeInitialGrid(size){\r\n        return this.makeGrid(size,[...range(1,Math.pow(size,2) - 1),null])\r\n    }\r\n\r\n    makeShuffledGrid(size){\r\n        let grid = this.makeGrid(size,[...shuffle(range(1,Math.pow(size,2) - 1)),null])\r\n        if (!this.isGridWinnable(grid)) {\r\n            return this.makeShuffledGrid(size)\r\n        }\r\n        return grid\r\n    }\r\n    /**\r\n     * Only half of all arrangements(16!/2) is solvable , and that is above 10 billion\r\n     * \r\n     * Grid arrangements solvability checking equation\r\n     * http://mathworld.wolfram.com/15Puzzle.html\r\n     */\r\n    isGridWinnable(grid){\r\n        let values = grid.reduce((values,row) => [...values,...row])\r\n                        .filter(value => value !== null)\r\n        let inversionSum = values.reduce((sum,value,currentIndex,allValues) => {\r\n            let behindValues = allValues.slice(currentIndex)\r\n            let inversion = behindValues.filter(behindValue => behindValue < value)\r\n            return sum + inversion.length\r\n        },0)\r\n        return inversionSum % 2 === 0\r\n    }\r\n\r\n    isGridOrdered(grid){\r\n        let gridSize = grid.length;\r\n        let values = grid.reduce((values,row) => [...values,...row])\r\n                        .filter(value => value !== null)\r\n        return isOrdered(values) && grid[gridSize - 1][gridSize - 1] === null\r\n    }\r\n\r\n    getNeighbourCells(cell,grid){\r\n        cell = {...cell}\r\n        grid = [...grid]\r\n        let neighbours = [\r\n            {x:cell.x - 1, y:cell.y},\r\n            {x:cell.x + 1, y:cell.y},\r\n            {x:cell.x, y:cell.y - 1},\r\n            {x:cell.x, y:cell.y + 1},\r\n        ]\r\n        return neighbours.filter(this.isAValidGridCell(grid));\r\n    }\r\n\r\n    isAValidGridCell = grid => cell => cell.x >= 0 && cell.y >= 0 && cell.x < grid.length && cell.y < grid.length\r\n\r\n    findEmptyCell(cells,grid){\r\n        return cells.find(cell => grid[cell.x][cell.y] === null)\r\n    }\r\n\r\n    findEmptyCellOnGrid(grid){\r\n        let x,y;\r\n        y = grid.findIndex(row => row.includes(null))\r\n        x = grid[y].findIndex(square => square === null)\r\n        return {x,y}\r\n    }\r\n\r\n    swapCellValues(cellOne,cellTwo,grid){\r\n        grid = [...grid]\r\n        let temp = grid[cellOne.x][cellOne.y];\r\n        grid[cellOne.x][cellOne.y] = grid[cellTwo.x][cellTwo.y]\r\n        grid[cellTwo.x][cellTwo.y] = temp\r\n        return grid;\r\n    }\r\n    \r\n    slideCell(cell,emptyCell,grid){\r\n        return this.swapCellValues(cell,emptyCell,grid)\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.setState({\r\n            grid:this.makeShuffledGrid(this.props.size),\r\n            duration:0,\r\n            movesCount:0,\r\n            gameWon:false\r\n        })\r\n        clearInterval(this.interval);\r\n        this.interval = null;\r\n    }\r\n\r\n    handleCellClick = (cell) => {\r\n        if (!this.interval) {\r\n            this.interval = setInterval(() => this.tick(), 1000);\r\n        }\r\n        let grid = this.state.grid\r\n        let emptyNeighbour,gameWon = this.state.gameWon;\r\n\r\n        if (gameWon) {\r\n            return\r\n        }\r\n        emptyNeighbour = this.findEmptyCell(this.getNeighbourCells(cell,grid),grid);\r\n        if (emptyNeighbour) {\r\n            grid = this.slideCell(cell,emptyNeighbour,grid);\r\n            if (this.isGridOrdered(grid)) {\r\n                gameWon = true;\r\n                clearInterval(this.interval);\r\n            }\r\n            this.setState({\r\n                grid,\r\n                movesCount:this.state.movesCount + 1,\r\n                gameWon\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    tick(){\r\n        this.setState(state => ({\r\n            duration: state.duration + 1\r\n        }));\r\n    }\r\n\r\n    secondsToTimeString(seconds){\r\n        var date = new Date(null);\r\n        date.setSeconds(seconds);\r\n        return date.toISOString().substr(14, 5);\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Board grid={this.state.grid} handleCellClick={this.handleCellClick}></Board>\r\n                <br />\r\n                <br />\r\n                <div class=\"container\">\r\n                <div class=\"stats-board\">\r\n                    <div class=\"stat\">\r\n                        <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                            <path d=\"M17 16a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4.01V4a1 1 0 0 1 1-1 1 1 0 0 1 1 1v6h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v8h1V1a1 1 0 1 1 2 0v9h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v13h1V9a1 1 0 0 1 1-1h1v8z\" /></svg>\r\n                        <span class=\"stat-label\">{this.state.movesCount}</span>\r\n                    </div>\r\n                    <div class=\"stat\">\r\n                        <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                            <path d=\"M16.32 7.1A8 8 0 1 1 9 4.06V2h2v2.06c1.46.18 2.8.76 3.9 1.62l1.46-1.46 1.42 1.42-1.46 1.45zM10 18a6 6 0 1 0 0-12 6 6 0 0 0 0 12zM7 0h6v2H7V0zm5.12 8.46l1.42 1.42L10 13.4 8.59 12l3.53-3.54z\" /></svg>\r\n                        <span class=\"stat-label\">{this.secondsToTimeString(this.state.duration)}</span>\r\n                    </div>\r\n                </div>\r\n                { this.state.gameWon? <h4>Game Won</h4>:null }\r\n                <br/>\r\n                <button className=\"btn\" onClick={this.resetGame}>New Game</button>\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Puzzle","import React,{Component} from \"react\";\r\nimport Puzzle from \"./puzzle/Puzzle\";\r\n\r\nclass App extends Component {\r\n\r\n    render(){\r\n        return <Puzzle size={4}></Puzzle>\r\n    }\r\n}\r\n\r\nexport default App;","import React  from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />,document.getElementById('root'))"],"sourceRoot":""}