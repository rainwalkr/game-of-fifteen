{"version":3,"sources":["puzzle/Board.jsx","puzzle/helpers.js","puzzle/Puzzle.jsx","storage.js","Game.jsx","index.js"],"names":["Board","cell","_this","this","cellClass","props","grid","x","y","react_default","a","createElement","className","key","onClick","_","handleCellClick","board","_this2","map","row","boardRow","square","renderSquare","Component","range","from","to","Object","toConsumableArray","Array","keys","slice","secondsToTimeString","seconds","date","Date","setSeconds","toISOString","substr","Puzzle","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isAValidGridCell","length","reset","setState","getInitialPuzzleState","size","onReset","duration","state","movesCount","clearInterval","interval","emptyNeighbour","obj","gameWon","setInterval","tick","onStart","JSON","parse","stringify","findEmptyCellAmong","getNeighbourCells","slideCell","isGridOrdered","onSolved","makeShuffledGrid","values","fill","index","start","end","makeGrid","concat","Math","pow","shuffle","array","shuffledArray","arguments","undefined","randomIndex","floor","random","includes","push","isGridWinnable","reduce","filter","value","sum","currentIndex","allValues","behindValue","gridSize","i","j","inOrder","isOrdered","objectSpread","position","neighbour","cells","find","findIndex","cellOne","cellTwo","temp","emptyCell","swapCellValues","direction","findEmptyCellOnGrid","getNeighbours","moveEmptyCellTo","top","down","left","right","puzzle_Board","width","height","xmlns","viewBox","d","prevProps","prevState","snapshot","slide","timestamp","slideTo","Storage","defaultVal","localStorage","getItem","setItem","Game","handleStart","isGamePlaying","handleReset","recordSmashed","handleSolved","gameState","previousBestPlay","bestPlay","currentBestPlay","getBestGamePlay","saveGamePlay","b","aProps","getOwnPropertyNames","bProps","propName","isObjectsEqual","storage","get","puzzleSlide","gamePlays","set","sort","playA","playB","moveCounts","sortGamePLays","window","addEventListener","handleKeydown","bind","removeEventListener","e","39","37","38","40","87","65","83","68","keyCode","now","bestCard","bestCardStyle","puzzle_Puzzle","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.a0063fa0.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\n\r\nclass Board extends Component {\r\n\r\n    renderSquare(cell){\r\n        let cellClass = 'square';\r\n        if (!this.props.grid[cell.x][cell.y]) {\r\n            cellClass+=' empty';\r\n        }\r\n        return <div className={cellClass} key={cell.x + cell.y} onClick={_ => this.props.handleCellClick(cell)}>\r\n            {this.props.grid[cell.x][cell.y]}\r\n        </div>\r\n    }\r\n    render(){\r\n        let board;\r\n        board = this.props.grid.map((row,x) => {\r\n            let boardRow = row.map((square,y) => {\r\n                return this.renderSquare({x,y})\r\n            })\r\n            return (\r\n                <div className=\"board-row\" key={x}>\r\n                    {boardRow}\r\n                </div>   \r\n            )\r\n        })\r\n        return (\r\n            <div className=\"board\">\r\n                {board}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board","\r\nexport const range = (from,to) => [...Array(to + 1).keys()].slice(from)\r\n\r\nexport const isOrdered = (array) => {\r\n    let i = 0,j=1,inOrder = true\r\n    do {\r\n       inOrder = array[i] < array[j]\r\n       if(!inOrder) return false \r\n       i++;\r\n       j++;\r\n    } while (j < array.length);\r\n    return inOrder;\r\n}\r\n\r\nexport const shuffle = (array,shuffledArray=[]) => {\r\n    let randomIndex = Math.floor(Math.random() * array.length)\r\n    if (shuffledArray.length === array.length) {\r\n      return shuffledArray;  \r\n    }\r\n    if (!shuffledArray.includes(array[randomIndex])) {\r\n        shuffledArray.push(array[randomIndex])\r\n    }\r\n    return shuffle(array,shuffledArray)\r\n}\r\n\r\nexport function secondsToTimeString(seconds){\r\n    var date = new Date(null);\r\n    date.setSeconds(seconds);\r\n    return date.toISOString().substr(14, 5);\r\n}\r\n\r\nexport function deepCopy(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nexport function isObjectsEqual(a, b) {\r\n    var aProps = Object.getOwnPropertyNames(a);\r\n    var bProps = Object.getOwnPropertyNames(b);\r\n\r\n    if (aProps.length !== bProps.length) {\r\n        return false;\r\n    }\r\n\r\n    for (var i = 0; i < aProps.length; i++) {\r\n        var propName = aProps[i];\r\n        if (a[propName] !== b[propName]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","import React,{Component} from 'react'\r\nimport './puzzle.css'\r\nimport './ribbon.css'\r\nimport Board from './Board';\r\n\r\nimport {range,isOrdered,shuffle,secondsToTimeString,deepCopy} from \"./helpers\";\r\n\r\nclass Puzzle extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = this.getInitialPuzzleState(props.size)\r\n    }\r\n\r\n    getInitialPuzzleState(size){\r\n        return {\r\n            grid:this.makeShuffledGrid(size),\r\n            duration:0,\r\n            movesCount:0,\r\n            gameWon:false,\r\n        }\r\n    }\r\n\r\n    makeGrid(size,values) {\r\n        return Array(size).fill(null).map((_,index) => {\r\n            let start = index * size\r\n            let end = start + size\r\n            return values.slice(start,end);\r\n        })\r\n    }\r\n\r\n    makeInitialGrid(size){\r\n        return this.makeGrid(size,[...range(1,Math.pow(size,2) - 1),null])\r\n    }\r\n\r\n    makeShuffledGrid(size){\r\n        let grid = this.makeGrid(size,[...shuffle(range(1,Math.pow(size,2) - 1)),null])\r\n        if (!this.isGridWinnable(grid)) {\r\n            return this.makeShuffledGrid(size)\r\n        }\r\n        return grid\r\n    }\r\n    /**\r\n     * Only half of all arrangements(16!/2) is solvable , and that is above 10 billion\r\n     * \r\n     * Grid arrangements solvability checking equation\r\n     * http://mathworld.wolfram.com/15Puzzle.html\r\n     */\r\n    isGridWinnable(grid){\r\n        let values = grid.reduce((values,row) => [...values,...row])\r\n                        .filter(value => value !== null)\r\n        let inversionSum = values.reduce((sum,value,currentIndex,allValues) => {\r\n            let behindValues = allValues.slice(currentIndex)\r\n            let inversion = behindValues.filter(behindValue => behindValue < value)\r\n            return sum + inversion.length\r\n        },0)\r\n        return inversionSum % 2 === 0\r\n    }\r\n\r\n    isGridOrdered(grid){\r\n        let gridSize = grid.length;\r\n        let values = grid.reduce((values,row) => [...values,...row])\r\n                        .filter(value => value !== null)\r\n        return isOrdered(values) && grid[gridSize - 1][gridSize - 1] === null\r\n    }\r\n\r\n    getNeighbourCells(cell,grid){\r\n        cell = {...cell}\r\n        grid = [...grid]\r\n        let neighbours = [\r\n            {x:cell.x - 1, y:cell.y},\r\n            {x:cell.x + 1, y:cell.y},\r\n            {x:cell.x, y:cell.y - 1},\r\n            {x:cell.x, y:cell.y + 1},\r\n        ]\r\n        return neighbours.filter(this.isAValidGridCell(grid));\r\n    }\r\n\r\n    getNeighbours(cell,grid){\r\n        cell = {...cell}\r\n        grid = [...grid]\r\n        let neighbours = [\r\n            {\r\n                cell:{x:cell.x, y:cell.y - 1},\r\n                position:'left'\r\n            },\r\n            {\r\n                cell:{x:cell.x, y:cell.y + 1},\r\n                position:'right'\r\n            },\r\n            {\r\n                cell:{x:cell.x - 1, y:cell.y},\r\n                position:'top'\r\n            },\r\n            {\r\n                cell:{x:cell.x + 1, y:cell.y},\r\n                position:'down'\r\n            },\r\n        ]\r\n        return neighbours.filter(neighbour => this.isAValidGridCell(grid)(neighbour.cell));\r\n    }\r\n\r\n    isAValidGridCell = grid => cell => cell.x >= 0 && cell.y >= 0 && cell.x < grid.length && cell.y < grid.length\r\n\r\n    findEmptyCellAmong(cells,grid){\r\n        return cells.find(cell => grid[cell.x][cell.y] === null)\r\n    }\r\n\r\n    findEmptyCellOnGrid(grid){\r\n        let x,y;\r\n        x = grid.findIndex(row => row.includes(null))\r\n        y = grid[x].findIndex(square => square === null)\r\n        return {x,y}\r\n    }\r\n\r\n    swapCellValues(cellOne,cellTwo,grid){\r\n        grid = [...grid]\r\n        let temp = grid[cellOne.x][cellOne.y];\r\n        grid[cellOne.x][cellOne.y] = grid[cellTwo.x][cellTwo.y]\r\n        grid[cellTwo.x][cellTwo.y] = temp\r\n        return grid;\r\n    }\r\n    \r\n    slideCell(cell,emptyCell,grid){\r\n        return this.swapCellValues(cell,emptyCell,grid)\r\n    }\r\n\r\n    moveEmptyCellTo(direction){\r\n        if (!direction) {\r\n            return\r\n        }\r\n        let grid = this.state.grid\r\n        let emptyCell = this.findEmptyCellOnGrid(grid);\r\n        let neighbours = this.getNeighbours(emptyCell,grid);\r\n        let neighbour = neighbours.find(neighbour => neighbour.position === direction);\r\n        if (neighbour) {\r\n            this.handleCellClick(neighbour.cell)\r\n        }\r\n    }\r\n\r\n    slideTo(direction){\r\n        let invertedDirection={\r\n            'top':'down',\r\n            'down':'top',\r\n            'left':'right',\r\n            'right':'left'\r\n        }\r\n        this.moveEmptyCellTo(invertedDirection[direction])\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState(\r\n            this.getInitialPuzzleState(this.props.size)\r\n            ,_ => {\r\n                this.props.onReset({\r\n                    duration:this.state.duration,\r\n                    movesCount:this.state.movesCount\r\n                })\r\n            })\r\n        clearInterval(this.interval);\r\n        this.interval = null;\r\n    }\r\n\r\n    handleCellClick = (cell) => {\r\n\r\n        let grid = this.state.grid\r\n        let emptyNeighbour,gameWon = this.state.gameWon;\r\n\r\n        if (!this.interval) {\r\n            this.interval = setInterval(() => this.tick(), 1000);\r\n            this.props.onStart({\r\n                grid:deepCopy(grid)\r\n            })\r\n        }\r\n\r\n        if (gameWon) {\r\n            return\r\n        }\r\n        emptyNeighbour = this.findEmptyCellAmong(this.getNeighbourCells(cell,grid),grid);\r\n        if (emptyNeighbour) {\r\n            grid = this.slideCell(cell,emptyNeighbour,grid);\r\n            if (this.isGridOrdered(grid)) {\r\n                gameWon = true;\r\n                clearInterval(this.interval);\r\n            }\r\n            this.setState({\r\n                grid,\r\n                movesCount:this.state.movesCount + 1,\r\n                gameWon,\r\n            },_ => {\r\n                if (this.state.gameWon) {\r\n                    this.props.onSolved({\r\n                        duration:this.state.duration,\r\n                        movesCount:this.state.movesCount\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    tick(){\r\n        this.setState(state => ({\r\n            duration: state.duration + 1\r\n        }));\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Board grid={this.state.grid} handleCellClick={this.handleCellClick}></Board>\r\n                <br />\r\n                <br />\r\n                <div className=\"stats-board\">\r\n                    <div className=\"stat\">\r\n                        <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                            <path d=\"M17 16a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4.01V4a1 1 0 0 1 1-1 1 1 0 0 1 1 1v6h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v8h1V1a1 1 0 1 1 2 0v9h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v13h1V9a1 1 0 0 1 1-1h1v8z\" /></svg>\r\n                        <span className=\"stat-label\">{this.state.movesCount}</span>\r\n                    </div>\r\n                    <div className=\"stat\">\r\n                        <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                            <path d=\"M16.32 7.1A8 8 0 1 1 9 4.06V2h2v2.06c1.46.18 2.8.76 3.9 1.62l1.46-1.46 1.42 1.42-1.46 1.45zM10 18a6 6 0 1 0 0-12 6 6 0 0 0 0 12zM7 0h6v2H7V0zm5.12 8.46l1.42 1.42L10 13.4 8.59 12l3.53-3.54z\" /></svg>\r\n                        <span className=\"stat-label\">{secondsToTimeString(this.state.duration)}</span>\r\n                    </div>\r\n                </div>\r\n                { this.state.gameWon?\r\n                    <div className=\"center pt-30\">\r\n                        <div className=\"roman-ribbon ooz-in\">\r\n                            <span>Puzzle Solved</span>\r\n                        </div>\r\n                    </div>\r\n                    :null }\r\n                <div className=\"center pt-30\">\r\n                    <button className=\"btn\" onClick={this.reset}>Shuffle</button>\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot){\r\n        if(this.props.slide.timestamp !== prevProps.slide.timestamp){\r\n            this.slideTo(this.props.slide.direction)\r\n        }\r\n    }\r\n}\r\n\r\nexport default Puzzle","export default class Storage {\r\n\r\n    get(key,defaultVal){\r\n        return JSON.parse(localStorage.getItem(key)) || defaultVal\r\n    }\r\n\r\n    set(key,value){\r\n        localStorage.setItem(key,JSON.stringify(value))\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport Puzzle from \"./puzzle/Puzzle\";\r\nimport Storage from \"./storage\";\r\nimport './game.css'\r\nimport { secondsToTimeString,isObjectsEqual } from \"./puzzle/helpers\";\r\n\r\nclass Game extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.storage = new Storage();\r\n        let bestPlay = this.getBestGamePlay(this.storage.get('gamePlays',[]))\r\n        this.state = {\r\n            bestPlay,\r\n            isGamePlaying:false,\r\n            recordSmashed:false,\r\n            puzzleSlide:{\r\n                direction:null,\r\n                timestamp:null\r\n            }\r\n        }\r\n    }\r\n    handleStart = _ => {\r\n        this.setState({\r\n            isGamePlaying:true\r\n        })\r\n    }\r\n\r\n    handleReset = _ => {\r\n        this.setState({\r\n            isGamePlaying:false,\r\n            recordSmashed:false\r\n        })\r\n    }\r\n\r\n    handleSolved = gameState => {\r\n        let previousBestPlay = this.state.bestPlay;\r\n        let currentBestPlay = this.getBestGamePlay(this.saveGamePlay(gameState));\r\n        if (currentBestPlay) {\r\n            let recordSmashed = previousBestPlay? !isObjectsEqual(previousBestPlay,currentBestPlay):false; \r\n            this.setState({\r\n                bestPlay:currentBestPlay,\r\n                isGamePlaying:false,\r\n                recordSmashed\r\n            })\r\n        }\r\n    }\r\n\r\n    saveGamePlay(gameState){\r\n        let gamePlays = this.storage.get('gamePlays',[])\r\n        gamePlays.push(gameState)\r\n        this.storage.set('gamePlays',gamePlays);\r\n        return gamePlays;\r\n    }\r\n\r\n    sortGamePLays(gamePlays){\r\n        return gamePlays.slice().sort((playA,playB) => {\r\n            return playA.duration - playB.duration || playA.moveCounts - playB.moveCounts\r\n        })\r\n    }\r\n\r\n    getBestGamePlay(gamePlays){\r\n        let sortedGamePlays = this.sortGamePLays(gamePlays);\r\n        return sortedGamePlays[0] || null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.handleKeydown.bind(this));\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.handleKeydown.bind(this));\r\n    }\r\n\r\n    handleKeydown(e) {\r\n        let moves = {\r\n            39:'right',\r\n            37:'left',\r\n            38:'top',\r\n            40:'down',\r\n            87:'top',//w\r\n            65:'left',//a\r\n            83:'down',//s\r\n            68:'right'//d\r\n        }\r\n        let direction = moves[e.keyCode]\r\n        if (direction) {\r\n            this.setState({\r\n                puzzleSlide:{\r\n                    direction,\r\n                    timestamp:Date.now()\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let bestCard = null\r\n        if (this.state.bestPlay) {\r\n            let bestCardStyle = 'best';\r\n            if (!this.state.isGamePlaying) {\r\n                bestCardStyle += ' highlight';\r\n            }\r\n            if (this.state.recordSmashed) {\r\n                bestCardStyle += ' flash';\r\n            }\r\n            bestCard = (\r\n                <div className={bestCardStyle}>\r\n                    <div className=\"flex-content-space-between\">\r\n                        <div className=\"flex-align-center\">\r\n                            <svg width=\"15\" height=\"15\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                                <path d=\"M15 9a3 3 0 0 0 3-3h2a5 5 0 0 1-5.1 5 5 5 0 0 1-3.9 3.9V17l5 2v1H4v-1l5-2v-2.1A5 5 0 0 1 5.1 11H5a5 5 0 0 1-5-5h2a3 3 0 0 0 3 3V4H2v2H0V2h5V0h10v2h5v4h-2V4h-3v5z\"/></svg>\r\n                            <span className=\"best-stat-label\">Best</span>\r\n                        </div>\r\n                        <div className=\"flex-align-center\">\r\n                            <svg width=\"15\" height=\"15\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                                <path d=\"M17 16a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4.01V4a1 1 0 0 1 1-1 1 1 0 0 1 1 1v6h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v8h1V1a1 1 0 1 1 2 0v9h1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1v13h1V9a1 1 0 0 1 1-1h1v8z\" /></svg>\r\n                            <span className=\"best-stat-label\">{this.state.bestPlay.movesCount}</span>\r\n                        </div>\r\n                        <div className=\"flex-align-center\">\r\n                            <svg width=\"15\" height=\"15\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                                <path d=\"M16.32 7.1A8 8 0 1 1 9 4.06V2h2v2.06c1.46.18 2.8.76 3.9 1.62l1.46-1.46 1.42 1.42-1.46 1.45zM10 18a6 6 0 1 0 0-12 6 6 0 0 0 0 12zM7 0h6v2H7V0zm5.12 8.46l1.42 1.42L10 13.4 8.59 12l3.53-3.54z\" /></svg>\r\n                            <span className=\"best-stat-label\">{secondsToTimeString(this.state.bestPlay.duration)}</span>    \r\n                        </div> \r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n        <div className=\"container\">\r\n            <br/>\r\n            <div className=\"flex-content-space-between\">\r\n                <div></div>\r\n                {bestCard}\r\n            </div>\r\n            <br/>\r\n            <Puzzle size={4} \r\n                slide={this.state.puzzleSlide}\r\n                onStart={this.handleStart} \r\n                onReset={this.handleReset} \r\n                onSolved={this.handleSolved}></Puzzle>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React  from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Game from './Game'\r\n\r\nReactDOM.render(<Game />,document.getElementById('root'))"],"sourceRoot":""}